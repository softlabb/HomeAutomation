#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Max72xxPanel.h>

//#include <Wire.h>
//#include <DS3231.h>

//#include <TimedAction.h>
#include <Time.h>

#include <ButtonV2.h>

#include <EEPROM.h>

#include "WiFiEsp.h"
#include "WiFiEspUdp.h"

//***************************************************************************************
// ZEGAR Firmware v0.1

//***************************************************************************************
// LED Matrix

int pinCS = 10; // Attach CS to this pin, DIN to MOSI and CLK to SCK (cf http://arduino.cc/en/Reference/SPI )
int numberOfHorizontalDisplays = 4;
int numberOfVerticalDisplays = 1;

Max72xxPanel matrix = Max72xxPanel(pinCS, numberOfHorizontalDisplays, numberOfVerticalDisplays);

int wait = 80; // In milliseconds
int spacer = 1;
int width = 5 + spacer; // The font width is 5 pixels


//***************************************************************************************
// TIMERy
 
//TimedAction  timer1000  = TimedAction(1000, readRTC);   // wywolywane co 1sec
//TimedAction  timer5000  = TimedAction(300000, RTCsynch);  // wywolywane co 5min

//***************************************************************************************
// BUTTON
// The circuit:
// * LED attached from pin 13 to ground
// * pushbutton attached from pin 2 to +5V
// * 10K resistor attached from pin 2 to ground

ButtonV2 buttonIntensity;
ButtonV2 buttonMode;
const byte ButtonPinIntensity = 2;
const byte ButtonPinMode = 3;

//***************************************************************************************
// Clock DS3231

//DS3231 clockDS3231;
//RTCDateTime dt;

int Godzina, oldGodzina;
int Minuta, oldMinuta;
int Sec, oldSec;


//***************************************************************************************
// EEPROM parametry
// Arduino Uno:        1kb EEPROM storage.
//  EEPROM.write(addr, val);
// value = EEPROM.read(address);
//
int addr = 0;

/*
struct MyEEPROMstruc 
{
  char SSID[10];
  char PASS[20];
  char NTP[15];
  byte Offset;
  byte LEDintense;
  byte Mode;
  char Ver[5];
};

MyEEPROMstruc Config;
*/
//
//***************************************************************************************
// ESP8266
#ifndef HAVE_HWSERIAL1
#include "SoftwareSerial.h"
SoftwareSerial Serial1(6, 7); // RX, TX
#endif



char timeServer[] = "80.50.231.226"; //"time.nist.gov";  // NTP server
byte packetBuffer[48]; //buffer to hold incoming and outgoing packets 

// A UDP instance to let us send and receive packets over UDP
WiFiEspUDP Udp;

//***************************************************************************************

boolean co2 = true;

// send an NTP request to the time server at the given address
unsigned long sendNTPpacket(char *ntpSrv)
{
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, 48);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)

  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12]  = 49;
  packetBuffer[13]  = 0x4E;
  packetBuffer[14]  = 49;
  packetBuffer[15]  = 52;

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  Udp.beginPacket(ntpSrv, 123); //NTP requests are to port 123

  Udp.write(packetBuffer, 48);

  Udp.endPacket();
}


void ntpSynchProc()
{ 

  sendNTPpacket(timeServer); // send an NTP packet to a time server
  delay(1000);
  
  if (Udp.parsePacket()) 
  {
    // We've received a packet, read the data from it into the buffer

    int aa = Udp.read(packetBuffer, 48);

    // the timestamp starts at byte 40 of the received packet and is four bytes,
    // or two words, long. First, esxtract the two words:

    unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
    unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);
    // combine the four bytes (two words) into a long integer
    // this is NTP time (seconds since Jan 1 1900):
    unsigned long secsSince1900 = highWord << 16 | lowWord;

    // now convert NTP time into everyday time:
    // Unix time starts on Jan 1 1970. In seconds, that's 2208988800:
    const unsigned long seventyYears = 2208988800UL;
    // subtract seventy years:
    unsigned long epoch = secsSince1900 - seventyYears + 3600 + 1;
    
    //clockDS3231.setDateTime(epoch);
    setTime(epoch);    
  }

}

//***************************************************************************************


void printDay()
 {
    String tape;
    char dzien[10];

    tape = "Dzisiaj jest ";
    switch(weekday())
    {
      case 1:
        tape += "Niedziela";
        break;
      case 2:
        tape += "Poniedzialek";
        break;
      case 3:
        tape += "Wtorek";
        break;
      case 4:
        tape += "Sroda";
        break;
      case 5:
        tape += "Czwartek";
        break;
      case 6:
        tape += "Piatek";
        break;
      case 7:
        tape += "Sobota";
        break;
    }
    
    tape += ", ";
    tape += day();
    tape += "/";
    tape += month();
    tape += "/";
    tape += year();
    tape += ", ";
    
    tape += " dzien roku";
    
     for ( int i = 0 ; i < width * tape.length() + matrix.width() - 1 - spacer; i++ ) {
  
      matrix.fillScreen(LOW);
  
      int letter = i / width;
      int x = (matrix.width() - 1) - i % width;
      int y = (matrix.height() - 8) / 2; // center the text vertically
  
      while ( x + width - spacer >= 0 && letter >= 0 ) {
        if ( letter < tape.length() ) {
          matrix.drawChar(x, y, tape[letter], HIGH, LOW, 1);
        }
  
        letter--;
        x -= width;
      }
  
      matrix.write(); // Send bitmap to display
  
      delay(40);
    } 
 }

void blin()
{
    digitalWrite(4, HIGH); 
    delay(100);
    digitalWrite(4, LOW);  
  
}
//***************************************************************************************
//***************************************************************************************

void setup() 
{
  char ssid[] = "SKYNET3";            // your network SSID (name)
char pass[] = "a1a1a1a1a1a1a1a1a1a1";        // your network password
int status = WL_IDLE_STATUS;     // the Wifi radio's status

  //EEPROM.get(addr, Config);
  matrix.setIntensity(0);
    pinMode(4, OUTPUT);
    blin(); //1
/*
  strcat(Config.SSID,"SKYNET3");
  strcat(Config.PASS,"a1a1a1a1a1a1a1a1a1a1");
  strcat(Config.NTP,"80.50.231.226");
  Config.Offset=1; // 1 tryb zimowy, 2 letni
  Config.LEDintense=0;
  Config.Mode=0;
  strcat(Config.Ver, "1.0");
  EEPROM.put(addr, Config);
*/
  
  anime2(); 

  matrix.setCursor(0,0);
  matrix.print("NTP");
  matrix.drawPixel(19,6,1);
  matrix.write(); // Send bitmap to display
    
  Serial1.begin(19200);   // initialize serial for ESP module

  // initialize ESP module
  WiFi.init(&Serial1);
  
  // check for the presence of the shield
 
  if (WiFi.status() == WL_NO_SHIELD) 
  {
    matrix.fillScreen(LOW);
    matrix.setCursor(0,0);
    matrix.print("WFoff");
    matrix.write(); // Send bitmap to display
    while (true);
    // don't continue
  }
  // attempt to connect to WiFi network
  while ( status != WL_CONNECTED) 
  {
    // Connect to WPA/WPA2 network
    matrix.drawPixel(20,6,1);
    matrix.write(); // Send bitmap to display
    status = WiFi.begin(ssid, pass);
  } 
  
  Udp.begin(2390);
  matrix.drawPixel(21,6,1);
  matrix.write(); // Send bitmap to display
  
  ntpSynchProc();
  matrix.drawPixel(22,6,1);
  matrix.write(); // Send bitmap to display

 
  pinMode(ButtonPinIntensity, INPUT_PULLUP);
  buttonIntensity.SetStateAndTime(LOW);

  pinMode(ButtonPinMode, INPUT_PULLUP);
  buttonMode.SetStateAndTime(LOW);
/*
  //clockDS3231.begin();
  // Set sketch compiling time
  //clockDS3231.setDateTime(__DATE__, __TIME__);
  // Lub recznie (YYYY, MM, DD, HH, II, SS
  //clockDS3231.setDateTime(2015, 12, 27, 16, 59, 30);
  
  //dt = clockDS3231.getDateTime();
    
  Godzina = hour();
  Minuta  = minute();
  Sec  = second();

  oldMinuta = Minuta;
  oldGodzina = Godzina;
  oldSec = Sec;

  //matrix.setIntensity(Config.LEDintense); // Use a value between 0 and 15 for brightness
  matrix.fillScreen(LOW);
  matrix.setCursor(3,0);
  matrix.print(Godzina, DEC);
  //matrix.drawPixel(16,2,1); // gorny kropek
  //matrix.drawPixel(16,4,1); // dolny kropek
  matrix.setCursor(18,0);
  matrix.print(Minuta, DEC);
  
  matrix.write(); // Send bitmap to display
*/
}

//***************************************************************************************

void loop() 
{
   time_t teraz;
   byte typeInt;
   byte typeMode;

   teraz = now(); // czytamy czas CPU
   
   //timer1000.check();
      
  
  Godzina = hour(teraz);
  Minuta  = minute(teraz);
  Sec = second(teraz);

  //################################################
  // przy zmianie godziny animacja
  if(Godzina != oldGodzina)
  {
    anime3();
    
    for ( int i = 0 ; i < 8; i++ ) 
    {
      matrix.fillScreen(LOW);

      //nowa godzina
      matrix.setCursor(3,i-8);
      matrix.print(Godzina);

      //stara godzina
      matrix.setCursor(3,i);
      matrix.print(oldGodzina);

      //matrix.drawPixel(16,2,1); // gorny kropek
      //matrix.drawPixel(16,4,1); // dolny kropek
      
      // nowa minuta
      matrix.setCursor(18,i-8);
      matrix.print(Minuta);

      // stara minuta
      matrix.setCursor(18,i);
      matrix.print(oldMinuta);

      matrix.write(); // Send bitmap to display
  
      delay(wait);
    }

    oldGodzina = Godzina;
    oldMinuta = Minuta;    
  }

  //################################################
  // przy zmianie minuty animacja
  if(Minuta != oldMinuta)
  {
    for ( int i = 0 ; i < 8; i++ ) 
    {
      matrix.fillScreen(LOW);
      
      matrix.setCursor(3,0);
      matrix.print(Godzina);
      
      //matrix.drawPixel(16,2,1); // gorny kropek
      //matrix.drawPixel(16,4,1); // dolny kropek
  
      // nowa minuta
      matrix.setCursor(18,i-8);
      matrix.print(Minuta);

      // stara minuta
      matrix.setCursor(18,i);
      matrix.print(oldMinuta);

      matrix.write(); // Send bitmap to display
  
      delay(wait);
    }
    
    oldMinuta = Minuta;
  }
  // KONIEC animacji minuty
  //################################################

  //################################################
  // przy zmianie sec animacja

  if(Sec != oldSec)
  {
    matrix.fillScreen(LOW);
    
    matrix.setCursor(3,0);
    matrix.print(Godzina);


    /*
    if(co2)
    {
      matrix.drawPixel(16,2,1); // gorny kropek
      matrix.drawPixel(16,4,1); // dolny kropek
      co2=false;
    }
    else
      co2=true;
    */
    if(second(teraz)<30)
      matrix.drawPixel(1+second(teraz),7,1); // gorny kropek
    else
      matrix.drawPixel(60-second(teraz),7,1); // gorny kropek

    matrix.setCursor(18,0);
    matrix.print(Minuta);
    
    matrix.write(); // Send bitmap to display
    blin();
    oldSec = Sec;
  }
  // KONIEC animacji sec
  //################################################
  

  typeInt = buttonIntensity.CheckButton(ButtonPinIntensity); // current time and length of time to press the button as many times as you can ie. 1.5 seconds
  
  switch (typeInt)
  {
    case WAITING:
      break;
    case PRESSED:
      //Config.LEDintense+=1;
      //if(Config.LEDintense>7)
      //    Config.LEDintense=7;
      //matrix.setIntensity(Config.LEDintense);    
      break;
    case DOUBLE_PRESSED:
      //Config.LEDintense-=1;
      //if(Config.LEDintense<0)
      //  Config.LEDintense=0;
      //matrix.setIntensity(Config.LEDintense);    
      break;
    case MULTI_PRESSED:
      break;
    case HELD:
      matrix.fillScreen(LOW);
      matrix.setCursor(0,0);
      matrix.print("NTP");
      matrix.write(); // Send bitmap to display
      ntpSynchProc();
      break;
  }
 
  typeMode = buttonMode.CheckButton(ButtonPinMode); // current time and length of time to press the button as many times as you can ie. 1.5 seconds

  switch (typeMode)
  {
    case WAITING:
      break;
    case PRESSED:
      //printData();
      police();
      break;
    case DOUBLE_PRESSED:
      printDay();
      break;
    case MULTI_PRESSED:
      anime1();
      break;
    case HELD:
      anime3();
      break;
  }

}


